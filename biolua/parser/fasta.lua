-- Part of BioLua by SweetPalma, 2017. All rights reserved.
-- FASTA parser interface:
local Parser  = (require 'biolua.parser.parser'):extend {__name = 'Fasta'}


-- Reading from file:
function Parser:read(name)

	-- Preparing file:
	self.__super.read(self, name)
	local file = self.file

	-- Reading definition:
	local first_line = file:read()
	if not first_line then
		error('Error while reading ' .. tostring(name) .. ': File is empty.', 2)
	elseif first_line:sub(1, 1) ~= '>' then
		error('Error while reading ' .. tostring(name) .. ': Invalid FASTA definition.', 2)
	end
	self.definition = first_line:sub(2)

	-- Reading sequence:
	local buf = {}
	local line_number = 0
	for line in file:lines() do
		line_number = line_number + 1
		if line:sub(1, 1) == '>' then
			error('Multi-sequence FASTA files are not supported yet.', 2)
		end
		buf[line_number] = line:gsub('[%d%s]', ''):lower()
	end
	self.sequence = table.concat(buf)

	-- Validating lines:
	if line_number == 0 then
		error('Error while reading ' .. tostring(name) .. ': File contain no sequence.', 2)
	end

return self end


-- Writing to file:
function Parser:write(name, length)
	
	-- Preparing file:
	self.__super.write(self, name)
	local file = self.file

	-- Writing definition:
	local definition = self.definition
	if not definition then
		definition = 'Generated by BioLua'
	end
	file:write('>' .. definition .. '\n')

	-- Writing sequence:
	local length, sequence = length or 70, self.sequence or ''
	for i = 1, #sequence, length do
		file:write(sequence:sub(i, i + length - 1):upper())
		file:write('\n')
	end

return self end


-- Packing:
return Parser
